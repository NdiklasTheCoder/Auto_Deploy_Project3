version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  # aws-cli: circleci/aws-cli@2.0.3

# commands:

#   commands:
#     notify_on_fail:
#     steps:
#       - slack/notify:
#           event: fail
#           channel: C03PRUM60HG
#           template: basic_fail_1

#     notify_on_success:
#     steps:
#       - slack/notify:
#           channel: C03PRUM60HG
#           event: pass
#           template: success_tagged_deploy_1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      WorkflowId:
        type: string
    steps:
      - run:
          name: Install AWS CLI if not Exist
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "AWS CLI already installed"
            fi
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} --region=$AWS_REGION
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --force --region=$AWS_REGION
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:6} --region=$AWS_REGION
            aws cloudformation delete-stack --stack-name udapeople-cloudfront --region=$AWS_REGION



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowId:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/2gjtQbvRrTohTvh5BGoWE9/migration_${CIRCLE_WORKFLOW_ID:0:6})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd backend
              npm install > /dev/null
              npm run migrations:revert
            fi
            

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
          
      # - notify_on_fail
      # - notify_on_success



  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Test
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend Audit
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical

      # - notify_on_slack


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend Audit
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical

      # - notify_on_slack

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:6} 
              
              
               
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:6} \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:6} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:6}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} \
            --output text) >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:6}

      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       echo "[web]" > .circleci/ansible/inventory.txt
            
      #       aws ec2 describe-instances \
      #       --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
      #         --output text >> .circleci/ansible/inventory.txt
      #       curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
      #         --request PUT \
      #         --data `aws ec2 describe-instances \
      #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #           --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:6}" \
      #           --output text` \
      #         https://api.memstash.io/values/UdapeopleDns
      #         echo URL: https://api.memstash.io/values/UdapeopleDns
      #         echo Token: ${CIRCLE_WORKFLOW_ID}
      
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt

      # - revert-migrations
      # - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [aa:db:f5:f8:73:fc:7c:99:7d:c4:0b:d6:2f:97:ad:f5]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Configure server
          command: |
            # add environment variables to server
            echo NODE_ENV=production > backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:6}

      # - revert-migrations
      # - destroy-environment


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      # - image: python:3.10-alpine3.16
      - image: circleci/node:13.8.0
      # - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install deps
          command: |
            # yum install tar gzip npm nodejs curl -y
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
            # apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # Get DB host from AWS and add to env
            # export TYPEORM_HOST=$(aws cloudformation list-exports --query "Exports[?Name==\`EndpointAddress-${CIRCLE_WORKFLOW_ID:0:7}\`].Value" --output text)
            # echo $TYPEORM_HOST
            # echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            cd backend
            # npm install
            # npm run build
            npm run migrations >> migrations.txt
            # cat migrations_dump.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - backend
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully" backend/migrations.txt
            then
              curl --insecure https://kvdb.io/2gjtQbvRrTohTvh5BGoWE9/migration_${CIRCLE_WORKFLOW_ID:0:6} -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:6}  

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:6} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:6}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:6} --recursive
      - destroy-environment:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:6}
      - revert-migrations:
          WorkflowId: ${CIRCLE_WORKFLOW_ID:0:6}    
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]